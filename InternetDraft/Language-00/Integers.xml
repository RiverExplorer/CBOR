<section anchor="Integers">
	<name>Integers</name>
	<t>
		Integers can be signed or unsigned.
		And they can be any size that is a multiple
		of 8 bits wide.
	</t>
	<section anchor="UnsignedIntegers">
		<name>Unsigned Integer</name>
		<t>
			This language specifies unsigned integers that
			are 8 bits, 16 bits, 32 bits , 64 bits, and bignum.
		</t>
		<dl newline="true">
			<dt>uint[W]_t</dt>
			<dd>
				<t>
					An unsigned integer, 'W' bits wide.
					Where 'W' must be a multiple of 8.
				</t>
				<t>
					Examples of sizes not predefined: int40_t, int128_t
				</t>
			</dd>
		</dl>
		<t>
			The ANTLR specification for unsigned integer:
		</t>
		<figure anchor="uint-antlr">
			<name>unsignedInteger ANTLR grammar</name>
			<artwork type="asciiart">
				<![CDATA[
.so ANTLR/unsignedInteger.g4
				]]>
			</artwork>
		</figure>
		<t>
			See <xref target="UnsignedIntegers"/> for details.
		</t>
			
		<t>Examples:</t>
		<artwork type="asciiart">
			<![CDATA[
uint8_t EightBitsWide;

uint16_t SixteenBitsWide;
]]>
		</artwork>
		<t>
			A CBOR implementation transmits the unsigned integer
			value, not the data type.
			A uint128_t unsigned integer with a value of one (1)
			would be transmitted as 0x01, a one octet value.
		</t>
		<t>
			The 72, 128, and 'W' bit length unsigned integer data
			types are just examples used to illustrate that this protocol
			definition language can specify what the application needs
			and an implementation translates that to and from the
			smallest CBOR data value when used.
			And note that the 72 and 128 ones are valid in this language
			along with other nonstandard sizes.
		</t>
	</section>

	<section anchor="SignedIntegers">
		<name>Signed Integer</name>
		<t>
			This language specifies signed integers that
			are 8 bits, 16 bits, 32 bits , 64 bits, and bignum.
		</t>
		<dl newline="true">
			<dt>intW_t</dt>
			<dd>
				<t>
					An signed integer, 'W' bits wide.
					Where 'W' must be a multiple of 8.
				</t>
			</dd>
		</dl>
		<t>
			ANTLR:
		</t>
		<figure anchor="int-antlr">
			<name>signedInteger grammar</name>
			<artwork type="asciiart">
				<![CDATA[
.so ANTLR/signedInteger.g4
				]]>
			</artwork>
		</figure>
		<t>
			See <xref target="UnsignedIntegers"/> for details.
		</t>
			
		<t>Examples:</t>
		<artwork type="asciiart">
			<![CDATA[
int8_t EightBitsWide;

int16_t SixteenBitsWide;
]]>
		</artwork>
		<t>
			A CBOR implementation transmits the signed integer
			value, not the data type.
			A int128_t signed integer with a value of negative one (-1)
			would be transmitted as a CBOR major type 1 0b00100000 (0x20),
			a one octet value.
		</t>
		<t>
			The 72, 128, and 'W' bit length signed integer data
			types are just examples used to illustrate that this protocol
			definition language can specify what the application needs
			and an implementation translates that to and from the
			smallest CBOR data value when used.
			And note that the 72 and 128 ones are valid in this language.
		</t>
	</section>
	<section>
		<name>Big Integers</name>
		<t>
			CBOR supports larger signed and unsigned integers
			as 'bignum'.
			An implementation conforming to this specification will
			transmit the value in a small of a CBOR size as possible.
		</t>
		<t>
			A value of one (1) could be transmitted as a bignum, and
			it would not conform to this specification as the single
			octet version is smaller.
			The non-bignum version is to be used when possible.
			When they fit, unsigned integers are to be transmitted
			as CBOR major type 0, and signed integers as CBOR
			major type 1.
		</t>
	</section>
</section>
