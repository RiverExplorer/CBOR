<section anchor="Identifiers">
	<name>Identifiers and Variables</name>
	<t>
		Each item encoded and decoded in an application
		will be paced into a memory location of the application
		at run time.
		These places are named with identifiers.
	</t>
	<t>
		And the generic name for this kind of identifier is 'variable'.
		And a variable may contain any kind of data
		the applications needs.
		These memory locations are named by the application
		developer and are called variables.
	</t>
	<t>
		Another usage of an identifier is to define
		a new data type to be used by the application.
	</t>
	<t>
		All variables have a data type (integer, float, ...)
		and are named in this language specification.
		And there are user defined data types that
		build from the built in data types and other
		user defined data types.
	</t>
	<section anchor="IdentifierNaming">
		<name>Identifiers and Scope</name>
		<t>
			Not all protocols will need to scope
			variables.
			The primary reason for scoping is to reduce
			name collisions in larger and more complex
			protocols.
		</t>
		<t>
			An identifier can be public for any code
			to use.
			This is in the 'public' scope.
		</t>
		<t>
			Or they can be internal to the
			objects being described.
			This is in the 'internal' scope.
			For example, a protocol might also define
			a method to validate the data being provided.
			This validation method might be scoped as internal
			so that access from other objects and public access is not
			possible.
			In such cases the protocol is defining that the implementer
			must implement the defined validation method.
		</t>
		<t>
			Or they can only be accessible within
			a 'namespace'.
			This is in the 'namespace' scope.
			A namespace is a way of identifying a collection
			of protocol names and definitions that may have names
			that are the same as the names used in a different
			namespace.
			For example a "Get()" method may exist in
			a MIME namespace "MIME:Get()", and in a file
			namespace "FILE:Get()".
			The namespace of protocol definitions, methods, and variables
			default to any namespace they are defined into, and
			my be defined and used by their full namespace path.
			See <xref target="Namespaces">Namespaces</xref>.
		</t>

		<section anchor="PublicScope">
			<name>Publicly scoped Identifiers</name>
			<t>
				Public identifiers names must start with
				a letter from the UTF-8 set: a-z or A-Z.
				And followed by zero or more from the set: a-z, A-Z,
				0-9, and underscore '_'.
				Shown here as a POSIX regular expression for
				an identifier in the public scope: [a-z][A-Z]*
			</t>
			<t>
				And the ANTLR definition. Where 'identifier'
				is any valid identifier, and 'IDENTIFIER' is
				a public identifier.
			</t>
			<figure anchor="identifier.g4">
				<name>identifier grammar</name>
				<artwork type="asciiart">
					<![CDATA[
.so ANTLR/identifier.g4

.so ANTLR/IDENTIFIER.g4
					]]>
				</artwork>
			</figure>
			<t>
				In the example <xref target="ex1"/>, Speed, TimeNow,
				Time9,  Travel_Time, Collection, FirstItem
				and AValue are public identifiers.
				As is the method name AMethodThatDoesSomething.
			</t>
			<t>
				int32_t, uint64_t, and float32_t
				are built in data types.
			</t>
			<t>
				Collection is a public identifier
				that is defining the name of a new user
				defined data type.
			</t>
			<t>
				Examples:
			</t>
			<figure anchor="ex1">
				<name>Sample with Public Scope</name>
				<artwork type="asciiart">
int32_t Speed;         // Okay public, follows the rules.

UTC_t TimeNow;         // Okay public, follows the rules.

float32_t Time9;       // Okay public, follows the rules.

struct Collection      // 'Collection' is valid, and public.
{
  int8_t    FirstItem; // Okay, value is public.

  float32_t AValue;    // Okay, value is public.

  /**
   * A public method that has access to all variables.
   *
   * @note 'void' means returns nothing.
   */
  void AMethodThatDoesSomething();
};
				</artwork>
			</figure>
		</section>

		<section anchor="InternalScope">
			<name>Internal Scoped Identifiers</name>
			<t>
				An internally scoped identifier is an identifier that
				starts with	an underscore '_'.
			</t>
			<t>
				Internally scoped identifiers can only be accessed
				from within the object they are defined in.
				They are often helper variables or methods.
			</t>
			<t>
				Internally scoped identifiers when not in
				a namespace and not in a struct, are only accessible
				within the generated code.
			</t>
			<t>
				Internally scoped identifiers in a namespace
				and not in a struct are namespace scoped.
				And are accessible anywhere in the same namespace.
			</t>
			<t>
				Internally scoped identifiers inside of
				a struct, are only accessible within the struct.
			</t>
			<t>
				The ANTLR for an internal identifier, with 'identifier'
				shown again, and 'internal_identifier' also included.
			</t>
			<figure anchor="internal_identifier.g4">
				<name>internal_identifier grammar</name>
				<artwork type="asciiart">
					<![CDATA[
.so ANTLR/identifier.g4

.so ANTLR/internal_identifier.g4
					]]>
				</artwork>
			</figure>
			<t>
				Examples:
			</t>
			<figure anchor="internal-ex1">
				<name>Internal Scope Example</name>
				<artwork type="asciiart">
<![CDATA[
// Example:
//
// _NextSequenceNumber is internal can only be accessed in
// the generated code.
//
uint64_t _NextSequenceNumber;

// A public identifier, that has internal members.
//
struct Collection 
{
  int8_t    ADevice; // Okay, value is public.

  float32_t AValue;  // Okay, value is public.

  string    _AName<>;// Okay, value is only
                     // available inside this object.

  /**
   * A public method that has access to all variables
   * including internal ones (_AName).
   * That calls _ValidateName().
   *
   * @param AName A string that could be null or any length.
   *
   * @note 'void' means returns nothing.
   */
  void SetName(string AName<>);

  /**
   * A public method that has access to all variables
   * including internal ones (_AName).
   *
   * @note Calls _ValidateName().
   *
   * @return A string that may be null, or any length.
   */
  string<> GetName();

  /**
   *
   * An internal method that has access to all variables
   * including internal ones (_AName) in 'Collection'
   * This method is only available to be called from within
   * this 'Collection' object.
   *
   * @param AName A string that may be null, or any length.
   *
   * @return true if AName is valid, or false if AName is
   * not valid.	 
   */
  bool _ValidateName(string AName<>);
};
]]>	
				</artwork>
			</figure>
			<t>
				See <xref target="Structures"/> for struct details.
			</t>
		</section>
		<section anchor="NamespaceScope">
			<name>Namespace Scoped Identifiers</name>
			<t>
				A namespace scoped identifier is an identifier that
				starts with	an underscore '_'.
				And exists inside of a 'namespace' and
				not within a struct.
				See <xref target="Namespaces"/> to understand
				namespaces and <xref target="Structures">Structs</xref>
				to understand 'struct'.
			</t>
			<t>
				Namespace scoped identifiers can only be accessed
				from within the same namespace they are defined in.
				They are often variables and methods that
				aid in the cross coordination of objects within
				the namespace.
			</t>
			<ul>
				<li>
					An identifier defined inside of a struct
					that starts with an underscore '_' is
					an identifier that is only known within the struct
					and is an internally scoped identifier.
				</li>
				<li>
					An identifier that is in a namespace, and not
					within a struct is a namespace scoped identifier.
				</li>
			</ul>
			<figure anchor="namespace_identifier.g4">
				<name>namespace grammar</name>
				<artwork type="asciiart">
					<![CDATA[
.so ANTLR/namespace_identifier.g4
					]]>
				</artwork>
			</figure>
			<t>
				Examples:
			</t>
			<figure anchor="namespace-ex1">
				<name>Namespace Scope Example</name>
				<artwork type="asciiart">
// A public Namespace called DailyData
//
namespace DailyData
{
  /**
   * This is a namespace scoped identifier.
   * It is in a namespace scoped, and not in a struct.
   */
  uint64_t _TotalBytesSent; 

  /**
   * Okay another namespace scoped identifier.
   */
  uint64_t _Travel_Time;

  /**
   * This struct is inside of a namespace.
   * And its identifier starts with an underscore '_'.
   * So _Summary is a namespace identifiers.
   * Only code in this same namespace has access
   * to this object type.
   */
  struct _Summary
  {
    int8_t    FirstItem; // Okay, value is public.

    float32_t AValue;    // Okay, value is public.

    int32_t   _AName;    // Okay, value is only
                         // available inside this struct.

    /**
     * A public method that has access to all variables
     * including internal ones (_AName).
     * And only available inside this struct
     * and namespace.
     *
     * @note 'void' means returns nothing.
     */
    void AMethod();

    /**
     * An internal method that has access to all variables
     * including internal ones (_AName).
     * This method is only available to be called from within
     * in the _Summary object.
     *
     * @note 'void' means returns nothing.
     */
    void _AnotherMethod();
};
				</artwork>
			</figure>
			<t>
				See <xref target="Structures"/> for struct details.
			</t>
		</section>
	</section>
</section>

<section anchor="VariableAndArrays">
	<name>Variables and Arrays</name>
	<t>
		Variables may be non-array, fixed size array, or variable sized array:
	</t>
	<section anchor="NonArrayVariables">
		<name>Non-Array Variables</name>
		<t>
			A non-array variable is one that is not a fixed
			or variable sized array. Examples:
		</t>
		<t>
			NOTE:
			A 'string' is always an array.
		</t>
		<t>
			Examples:
		</t>
		<figure anchor="internal-ex2">
			<name>Variable No Arrays Example</name>
			<artwork type="asciiart">
				<![CDATA[
uint8_t  SimpleUnsignedInteger;

float32_t  Simple32BitFloat;

map<uint8_t,AnObjectType>; SimpleMap;

multimap<uint8_t,AnObjectType> SimpleMultiMap;
				]]>
			</artwork>
		</figure>
	</section>
		
	<section anchor="FixedVariables">
		<name>Fixed Size Array '[]'</name>
		<t>
			A fixed size array variable has a size enclosed
			in square brackets '[]'. Examples:
		</t>
		<t>
			Examples:
		</t>
		<figure anchor="fixed-array-ex1">
			<name>Variable Fixed Size Array Examples</name>
			<artwork type="asciiart">
				<![CDATA[
uint8_t  FixedUnsignedInteger[30];

float32_t  Fixed32BitFloat[12];

map<uint8_t,AnObjectType>; FixedMap[34];

multimap<uint8_t,AnObjectType> FixedMultiMap[16];

string LargeString[2048];
				]]>
			</artwork>
		</figure>
	</section>
		
	<section anchor="VariableArrays">
		<name>Variable Size Array '&lt;Min,Max&gt;'</name>
		<t>
			A variable array size array has a minimum size.
			The default minimum size is zero.
		</t>
		<t>
			A variable array has a maximum size.
			The default maximum size is unlimited.
		</t>
		<t>
			The minimum and maximum values are separated
			by the comma (,) character.
		</t>
		<t>
			An variable array size is specified in one of 3 ways:
		</t>
		<section>
			<name>Variable Size Array With Minimum and Maximum Size</name>
			<dl newline="true">
				<dt>&lt;Min,Max&gt;</dt>
				<dd>
					<t>
						Where:
					</t>
					<dl>
						<dt>Min</dt>
						<dd>
							Is the minimum size for the array.
							The default minimum is zero.
						</dd>
						<dt>Max</dt>
						<dd>
							Is the maximum size of the array.
							The default minimum size is unlimited.
							Unlimited may also be specified as '*'.
						</dd>
					</dl>
					<t>
						Examples:
					</t>
					<figure anchor="variable-array-ex1">
						<name>Variable Variable Size Array Examples</name>
						<artwork type="asciiart">
							<![CDATA[
// An array of 5 to 14 int8_t data elements.
//										 
int8_t VariableName<5,14>;
										 
// An array of 3 to 16 float32_t data elements.
//										 
float32_t FloatArray<3,16>;

// An string of 5 to 42 characters.
// The size would range from 5 to 168 octets in size.
//
string StringVariable<5,42>;

// An string of 8 to unlimited characters.
// The size would be from 8 to unlimited size.
//
string AString<8,*>;
							]]>
						</artwork>
					</figure>
				</dd>
			</dl>
		</section>
		<section>
			<name>Variable Size Array With Maximum Size</name>
			<dl>
				<dt>&lt;Max&gt;</dt>
				<dd>
					<t>
						A shorthand for &lt;0,Max&gt;.
						Specifies a zero to Max sized array.
					</t>
					<t>
						Example:
					</t>
					<figure anchor="fixed-array-ex2">
						<name>Variable Size Array Max Size Examples</name>
						<artwork type="asciiart">
							<![CDATA[
// An array of length zero to 17 characters in length.
// And a size up to 68 octets.
//
string VariableName<17>;
							]]>
						</artwork>
					</figure>
				</dd>
			</dl>
		</section>
		<section>
			<name>Variable Size Array With Default Size</name>
			<dl newline="true">
				<dt>&lt;&gt;</dt>
				<dd>
					<t>
						A shorthand for &lt;0,*&gt;.
					</t>
					<t>
						Example:
					</t>
					<figure anchor="fixed-array-ex4">
						<name>Variable Array Defaults Examples</name>
						<artwork type="asciiart">
							<![CDATA[
uint64_t VariableName<>;
							]]>
						</artwork>
					</figure>
				</dd>
			</dl>
		</section>
		<section>
			<name>Variable Array Examples</name>
			<t>
				Examples:
			</t>
			<figure anchor="fixed-array-ex5">
				<name>Variable Array Examples</name>
				<artwork type="asciiart">
					<![CDATA[
// A variable array that holds no more than
// 30 uint8_t items.
//								 
uint8_t  VariableUnsignedInteger1<30>;

// A variable array of unlimited uint8_t items.
//
uint8_t  VariableUnsignedInteger2<>;

// A variable array of unlimited uint8_t items.
//
uint8_t  VariableUnsignedInteger3<*>;

// A variable array that hold up to 12 float32_t items.
//
float32_t  Variable32BitFloat<12>;

// A more complex example.
//
// A variable array that holds up to 34 key/value maps.
//
// Each map has keys of type of uint8_t and values
// of each map are of type AnObjectType.
//
// Each of the up to 34 maps, must have a unique key to itself
// but not to the other maps.
//
map<uint8_t,AnObjectType> VariableMap<34>;

// A variable array of multimaps.
//
// Each multimaps has keys of type uin8_t and
// each multimap has values of type OtherObjectType.
//
// The array holds up to 16 of these multimaps.
// Each multimap may have duplicate keys.
//
multimap<uint8_t,OtherObjectType> VariableMultiMap<16>;
					]]>
				</artwork>
			</figure>
		</section>
	</section>
</section>

<section>
	<name>Declaring Variables</name>
	<t>
		A variable has a type and a name.
		And the name can have some attributes.
		The ANTLR for a variable declaration is:
	</t>
	<figure  anchor="declaration-g4">
		<name>declaration grammar</name>
		<artwork type="asciiart">
			<![CDATA[
.so ANTLR/declaration.g4
			]]>
		</artwork>
	</figure>
</section>
