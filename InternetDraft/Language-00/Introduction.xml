<!-- Copyright 2025 RiverExplorer LLC and Douglas Mark Royer -->

<section xmlns:xi="http://www.w3.org/2001/XInclude">
  <name>Introduction</name>
	<t>NOTICE: This is WORK IN PROGRESS</t>
<!--	
	<artset>
		<artwork align="center" type="ascii-art" src="UnderConstruction.txt"/>
		<artwork align="center" type="svg" src="UnderConstruction.svg"/>
		</artset>
-->		
	<t>
		A CBOR protocol compiler is tool that reads in one or
		more CBOR definition files and produces code that
		can be used by a computer.
		This code is herein refereed to as generated code.
		And the input files are called CBOR language files.
	</t>
	<t>
		This specification uses C++ and C# in several of the examples.
		However a generator could be produced for almost all
		computer languages.
		As the purpose of this is to generate code to be compiled
		and run on a computer, some programming experience is
		helpful to fully understand this specification.
	</t>
	<t>
		This specification was written in parallel with the creation
		of an <xref target="CBORgenOpenSource"> with documentation
		open source CBOR language protocol compiler</xref>.
		and documentation at <xref target="cborgendocs"/>.
		This was a way to help validate the open source compiler and the
		CBOR language.
	</t>
	<t>
		Many computer languages have built in and application
		defined data types that allow for more complex
		objects that CBOR itself defined.
		The solution is keep breaking down the data
		type until they are objects that can be converted
		to the CBOR wire protocol.
	</t>
	<t>
		For example an object might consist of a persons
		name with three parts, their first, middle, and last name.
		This CBOR language allows for an object to be created
		with the purpose of the generating code that sends three
		CBOR textstring objects without the application
		developer having to write the I/O code for
		each complex data type by hand.
	</t>
	<t>
		All CBOR data types can be specified in this
		language as well as more complex types built
		from the CBOR data types.
	</t>
	<t>
		Given the same CBOR language file, each
		CBOR protocol compiler generates compatible
		over the wire data.
		Allowing independent development.
		Application protocols can be developed and
		designed using this	language and implementations would
		not need to	hand code the reading or writing of the protocol
		details.
	</t>
	<t>
		The goal of this language is to allow two or more cooperating
		applications to exchange data.
		It its not to guarantee that all generated code will work
		on all computers.
		For example if the protocol definition file uses 128-bit
		integers, then the generated code would only compile
		and work on systems that support 128-bit integers.
		This could be done if the computer supported native
		128-bit integers, or by using a library
		that emulates larger integers.
		As the size of integers and other data types are
		not the same on all systems.
		Application designers may need to adjust the protocol
		they define to ensure that all data types they use
		in the protocol are supported by all intended computers.
		This goal allows for both flexability, and for future
		system that may have expanded data types.
	</t>
</section>
