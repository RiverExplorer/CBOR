<!-- Copyright 2025 RiverExplorer LLC and Douglas Mark Royer -->

<section xmlns:xi="http://www.w3.org/2001/XInclude">
  <name>Introduction</name>
	<t>NOTICE: This is WORK IN PROGRESS</t>
	<t>
		This document specifies a CBOR Language Specification (CLS).
		The purpose of the CLS is to be able to define
		a consistent over the wire protocol definitions that
		transfer data between endpoints with the data
		encoded and decoded as specified in CBOR.
	</t>
	<t>
		A CBOR protocol compiler is tool that reads in one or
		more CBOR definition files and produces code that
		can be used by a computer.
		This code is herein refereed to as generated code.
		And the input files are called CBOR Language Specification files,
		or CLS files.
		Within this document such files in examples use
		the ".cls" file name extension.
	</t>
	<t>
		CBOR specifies how to transfer the data.
		And CLS specifies what will be transferred.
	</t>
	<t>
		This specification uses C/C++ and C# in several of the examples.
		However a generator could be produced for almost all
		computer languages.
		As the purpose of this is to generate code to be compiled
		and run on a computer, some programming experience is
		helpful to fully understand this specification.
	</t>
	<t>
		Many of the code examples are commented using the doxygen
		<xref target="DOXYGEN"/>
		style of commenting.
	</t>
	<t>
		This specification was written in parallel with the creation
		of an <xref target="CLSOpenSource">
		open source CBOR language protocol compiler</xref>.
		The documentation at <xref target="CLSgendocs"/>.
		This was a way to help validate the open source compiler and
		this specification.
	</t>
	<t>
		Many computer languages have built in and application
		defined data types that allow for more complex
		objects that CBOR itself defined.
		The solution is breakdown the more complex data
		type until they are objects that can be converted
		to and from the CBOR stream format.
		And then consolidating them during decoding.
	</t>
	<t>
		For example an object might consist of a persons
		name with three parts, their first, middle, and last name.
		This CBOR language allows for an object to be created
		with the purpose of the generating code that sends three
		CBOR text string objects without the application
		developer having to write the I/O code for
		each complex data type by hand.
	</t>
	<t>
		All CBOR data types can be specified in this
		language as well as more complex types built
		from the CBOR data types.
	</t>
	<t>
		Given the same CLS input file, each
		CBOR protocol compiler generates compatible
		over the wire data.
		Allowing independent development.
		Application protocols can be developed and
		designed using this	language and implementations would
		not need to	hand code the reading or writing of the protocol
		details.
	</t>
	<t>
		The goal of this language is to allow two or more cooperating
		applications to exchange data.
		It its not to guarantee that all generated code will work
		on all computers.
		For example if the protocol definition file uses 128-bit
		integers, then the generated code would only compile
		and work on systems that support 128-bit integers.
		This could be done if the computer supported native
		128-bit integers, or by using a library
		that emulates larger integers.
		As the size of integers and other data types are
		not the same on all systems.
		Application designers may need to adjust the protocol
		they define to ensure that all data types they use
		in the protocol are supported by all intended computers.
		This goal allows for both flexibility, and for future
		systems that may have expanded data types.
	</t>
	<t>
		The sample implementation was written
		using the open source ANTLR4 compiler:
		<eref target="https://github.com/antlr/antlr4"/>.
		And is much like Yacc(<xref target="YACC"/>)/Bison(<xref target="BISON"/>) and lex(<xref target="LEX"/>)/Flex(<xref target="FLEX"/>) grammar.
	</t>
	<t>
		Some data requires synchronous interactions.
		And other data may be transmitted asynchronously.
		See <xref target="AsyncSync"> Async and Sync Data</xref>.
	</t>
	<t>
		Some data such as audio and video may be streamed
		and not sent as blocks of data.
		Streamed data may be send asynchronously or synchronously
		See <xref target="Stream">Stream Data</xref>
	</t>
</section>
